//=================================================================
// Grid
//=================================================================

/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
http://github.com/esr360/Kayzen-GS/
	
-----------------------------------------------------------------*/

@mixin grid($custom: ()) {

	//-------------------------------------------------------------
	// Config
	//-------------------------------------------------------------
	
	$grid: config((
		name                : grid,
		options: (
			base-width      : 1200px,
			max-width       : 90%,
			small-width     : 940px,
			full-width      : 100%,
			columns         : 12,
			gutter          : 3%,
			col-collapse    : 940px,
			row-namespace   : "row",
			col-namespace   : "span"	
		),
		settings: (
			old-ie          : true,
			responsive      : true,
			mobile-first    : false,
			column-stacking : true,
			width-override  : true,
			flow-columns    : true,
			magic-columns   : true,
			block-columns   : true,
			no-gutter       : true
		),
		breakpoints: (
			break-0         : 0px,
			break-1         : 460px,
			break-2         : 720px,
			break-3         : 940px,
			break-4         : 1200px,
			break-5         : 1400px
		),
		fractions: (
			full            : (1, 1),
			half            : (1, 2),
			third           : (1, 3),
			quarter         : (1, 4),
			sixth           : (1, 6)
		)
	), $custom) !global;

	// Set min/max width for breakpoints
	$scale: if(option($grid, settings, mobile-first), min, max);
	
	// Reset "mobile-first" to false if "responsive" is disabled
	@if not option($grid, settings, responsive) {
		$grid: config((settings: (
			mobile-first: false
		)), $grid);
	}
	
	// Column Selector
	$col-selector: '[class*="#{option($grid, options, col-namespace)}"]' !global;
	
	//-------------------------------------------------------------
	// Row
	//-------------------------------------------------------------
	
	%row {
		// Firefox/IE collapse white-space
		letter-spacing: -1em;
		// Webkit collapse white-space
		display: table !important;
		width: 100%;
		// Opera collapse white-space
		@at-root {
			.opera-only :-o-prefocus, & {
				word-spacing: -0.43em;
			}
		}
		// IE < 8 collapse white-space
		@if option($grid, settings, old-ie) {
			*letter-spacing: normal;
			*word-spacing: -0.43em;
		}	
		// Required for some third-party sliders
		table-layout: fixed;
		// Reset spacing
		@at-root {
			* {        
				letter-spacing: normal;
				word-spacing: normal;
				text-rendering: auto;
			}		
		}
	}
	
	@include component(#{option($grid, options, row-namespace)}) {
		
		@extend %row;
		
		// No Gutter Row
		@if option($grid, settings, no-gutter) {
			@include modifier(no-gutter) {
				$row-no-gutter: & !global;
			}
		}
		
		// Flow Columns Row
		@if option($grid, settings, flow-columns) {
			@include modifier(flow) {
				margin-left: -#{option($grid, options, gutter)};
				width: 100% + option($grid, options, gutter);
				@for $i from 1 through option($grid, options, columns) {
					> .#{option($grid, options, col-namespace)}-#{$i} {		
						@if option($grid, settings, mobile-first) {
							width: (100% - option($grid, options, gutter));
							@media (min-width: option($grid, options, col-collapse)) {
								width: flow-column-width($i, option($grid, options, columns));
							}
						} @else {
							width: flow-column-width($i, option($grid, options, columns));
						}
					}
				}
				> #{$col-selector} {
					margin-left: option($grid, options, gutter);
					&:not([class*="break"]) {
						@if option($grid, settings, responsive) {
							@if not option($grid, settings, mobile-first) {
								@media (max-width: option($grid, options, col-collapse)) {
									width: (100% - option($grid, options, gutter));
								}
							}
						}
					}
				}
			}
		}
		
		// Magic Columns Row
		@if option($grid, settings, magic-columns) {
			@include modifier(magic) {
				> #{$col-selector}:not([class*="break"]) {	
					@include magic-column((
						semantic: false
					));
				}
			}
		}
		
		// Block Columns Row
		@if option($grid, settings, block-columns) {
			@include modifier(block) {
				> #{$col-selector}:not([class*="break"]) {			
					@if option($grid, settings, mobile-first) {
						@media (min-width: option($grid, options, col-collapse)) {
							display: table-cell;
						}
					} @else {
						display: table-cell;
					}
				}
				&:after {
					display: none;
				}
			}
		}
		
		// Default Stacking
		@if option($grid, settings, responsive) {
			@media (#{$scale}-width: option($grid, options, col-collapse)) {
				&:not([class*="break"]):not([class*="flow"]) {
					@include stack-columns;
				}
			}
		}
	
		// Custom Stacking
		@if option($grid, settings, responsive) and option($grid, settings, column-stacking) {
			@each $bp, $width in option($grid, breakpoints) {
				@media (#{$scale}-width: $width) {
					&.#{$bp} {
						@include stack-columns;
						@if option($grid, settings, mobile-first) {
							@include modifier(block) {
								> #{$col-selector} {
									display: table-cell;
								}
							}
						}
					}
				}
			} 
		}
		
	} // component(row)
	
	//-------------------------------------------------------------
	// Single Column
	//-------------------------------------------------------------
	
	%column {
		display: inline-block;
		vertical-align: top;
		// IE < 8: fake inline-block
		@if option($grid, settings, old-ie) {
			*display: inline;
			zoom: 1; 
		}
	}
	
	#{$col-selector} {
		
		@extend %column;
		
		@if option($grid, settings, mobile-first) {
			width: 100%;
		} @else {	
			@at-root {
				.#{option($grid, options, row-namespace)},
				[class*="#{option($grid, options, row-namespace)}-"]:not([class*="-no-gutter"]):not([class*="-flow"]) {
					> #{$col-selector} {
						@include gutter;
					}
				}
			}
		}
		
		// Default Column Width
		@if not option($grid, settings, mobile-first) {
			@for $i from 1 through option($grid, options, columns) {
				@at-root {
					.#{option($grid, options, col-namespace)}-#{$i} {	
						width: column-width($i, option($grid, options, columns));
					}
					#{$row-no-gutter} {
						.#{option($grid, options, col-namespace)}-#{$i} {	
							width: no-gutter-column-width($i, option($grid, options, columns));
						}
					}
				}
			}	
		}
		
	// Custom width overrides
	//-------------------------------------------------------------
	
		@if option($grid, settings, responsive) and option($grid, settings, width-override) {
				
			// Reverse $breakpoints map
			// This is to allow the generated CSS to override when scaling
			$reverse-breakpoints: if(
				option($grid, settings, mobile-first),
				option($grid, breakpoints),
				reverse-map(option($grid, breakpoints))
			);
			
			@each $bp, $width in $reverse-breakpoints {
				@media (#{$scale}-width: $width) {
					@each $name, $fraction in option($grid, fractions) {		
						&.#{$bp}-#{$name} {
							width: flow-column-width(nth($fraction, 1), nth($fraction, 2));
							@at-root #{$row-no-gutter} & {
								width: no-gutter-column-width(nth($fraction, 1), nth($fraction, 2));
							}
						}
					}
				}
			}
		
		} //@if (responsive) & (width-override)
		
	} // $col-selector
	
} // @mixin grid

//-------------------------------------------------------------
// Functions
//-------------------------------------------------------------

// Column Widths
//-------------------------------------------------------------

// Default width
@function column-width($span, $columns) {
	@return ( (100/$columns) * $span) - ( ( ((100 / ((100/$columns) * $span)) - 1) * option($grid, options, gutter) ) / ( $columns / $span ) );
}

// Flow Column width
@function flow-column-width($span, $columns) {
	@return ((100/$columns) * $span) - option($grid, options, gutter);
}

// Magic Column width
@function magic-column-width($columns: $columns) {
	@return (100/$columns) - ( ( ( (100 / (100/$columns) ) - 1) * option($grid, options, gutter) ) / $columns );
}

// No gutter width
@function no-gutter-column-width($span, $columns) {
	@return percentage($span/$columns);
}

// Config
//-------------------------------------------------------------

@function breakpoint($breakpoint) {
    @return map-get(map-get($grid, breakpoints), $breakpoint);
}

@function fraction($fraction) {
    @return map-get(map-get($grid, fractions), $fraction);
}

// Reverse Map Function
// http://git.io/vLfuz
//-----------------------------------------------------------------

@function reverse-map ($map) {	
    $keys: map-keys($map);
    $map-reversed: ();    
    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }
    $result: $map-reversed; 
    @return $result;
}

//-------------------------------------------------------------
// Utilities
//-------------------------------------------------------------

// Gutter
//-------------------------------------------------------------

@mixin gutter {
	margin-left: option($grid, options, gutter);
	&:first-child {
		margin-left: 0;
	};
}

// Column Stacking
//-------------------------------------------------------------

@mixin stack-columns {
	@if option($grid, settings, mobile-first) {
		@for $i from 1 through option($grid, options, columns) {
			.#{option($grid, options, col-namespace)}-#{$i} {	
				width: column-width($i, option($grid, options, columns));
			}
		}
		> #{$col-selector}:not([class*="break"]) {
			@include gutter;
		}
	} @else {
		> #{$col-selector}:not([class*="break"]) {
			width: 100%;
			margin-left: 0;
			display: block;
		}
	}		
}

// Magic Column
//-------------------------------------------------------------

@mixin magic-column($config: ()) {
	
	$config: map-merge((
		namespace : option($grid, options, col-namespace), 
		stack     : option($grid, options, col-collapse), 
		semantic  : true
	), $config);
	
	&:first-child {
		@for $i from 1 through option($grid, options, columns) {
			&:nth-last-child(#{$i}) {
				&, ~ [class*="#{map-get($config, namespace)}"] {
					@if option($grid, settings, mobile-first) {	
						@if map-get($config, semantic) {
							margin-left: 0;	
							width: 100%;
						}	
						@media (min-width: map-get($config, stack)) {
							width: magic-column-width($i);
							@if map-get($config, semantic) {
								@include gutter;
							}
						}
					} @else {
						width: magic-column-width($i);
						@if map-get($config, semantic) {
							@include gutter;
						}
						@media (max-width: map-get($config, stack)) {
							width: 100%;
							@if map-get($config, semantic) {
								margin-left: 0;
							}
						}
					}
				}
			}
		}
	}
		
} // @mixin magic-column

//=================================================================
// Semantic Grid System Framework
//=================================================================

// Custom Row
//-----------------------------------------------------------------

@mixin row($type: null) {
	@extend %row;
	@if $type == flow {		
		margin-left: -#{option($grid, options, gutter)};
		width: 100% + option($grid, options, gutter);
	} @else if $type == block {		
		&:after {
			display: none;
		}
	}
}

// Custom Column
//-----------------------------------------------------------------

@mixin column($config: ()) {
	
	$config: map-merge((
		width        : full, 
		type         : null, 
		namespace    : option($grid, options, col-namespace), 
		stack        : option($grid, options, col-collapse), 
		mobile-first : option($grid, settings, mobile-first),
		respond-to   : null
	), $config);
	
	$config: $config !global;
	
	@extend %column;
	
	$span: null;
	$columns: null; 
			
	@if type-of(option($config, width)) == string {
		$span: nth(fraction(option($config, width)), 1);
		$columns: nth(fraction(option($config, width)), 2);
	} @else if type-of(option($config, width)) == number {
		$span: option($config, width);
		$columns: 100;	
	} @else if type-of(option($config, width)) == list {	
		$span: nth(option($config, width), 1);
		$columns: nth(option($config, width), 2);				
	}
	
	@if option($config, type) == magic {
		width: magic-column($namespace, $stack);
	} @else if option($config, type) == flow {		
		width: flow-column-width($span, $columns);
		margin-left: option($grid, options, gutter);
	} @else {
		@if option($config, mobile-first) {
			width: 100%;
			@media (min-width: $stack) {
				width: column-width($span, $columns);
				@include gutter;
				@if $type == block {
					display: table-cell;		
				} 
			}	
		} @else {			
			@include gutter;
			width: column-width($span, $columns);
			@if option($config, type) == block {
				display: table-cell;		
			} 
			@media (max-width: option($config, stack)) {
				display: block;
				margin-left: 0;
				width: 100%;
			}	
		}
	}
	
	@if option($config, respond-to) {
		@each $width, $breakpoint in option($config, respond-to) {
			$columns: null;	$span: null; $respond-scale: null;	
			@if option($config, mobile-first) { 
				$respond-scale: min; 
			} 
			@else {
				$respond-scale: max; 
			}
			@media (#{$respond-scale}-width: breakpoint($breakpoint)) {
				@if type-of($width) == string {
					$span: nth(fraction($width), 1);
					$columns: nth(fraction($width), 2);
				} @else if type-of($width) == number {
					$span: $width;
					$columns: 100;
				} @else if type-of($width) == list {
					$span: nth($width, 1);
					$columns: nth($width, 2);			
				}
				@if option($grid, flow-columns) {
					width: flow-column-width($span, $columns);	
				} @else {	
					width: column-width($span, $columns);
					@if not option($config, mobile-first) {
						margin-left: 0;
					}	
				}		
			}		
		}
	}
	
} // @mixin column