//=================================================================
// Sections
//=================================================================

@mixin sections($custom: ()) {

	//-------------------------------------------------------------
	// Config
	//-------------------------------------------------------------

	$sections: config((
		'name'                    : 'section',
        'heading-group-color'     : typography('colors', 'heading'),
        'padding'                 : 6em 0,
        'padding-mini'            : 4em 0,
        'banner-padding'          : 5em 0,
        'block-padding'           : 7%,
        'panel-background'        : color('greyscale', 'white'),
        'secondary-background'    : color('brand', 'primary'),
        'secondary-color'         : color('greyscale', 'white'),
        'overlay-color'           : color('greyscale', 'white'),
        'overlay-background'      : rgba(color('brand', 'primary'), 0.4),
        'overlay-deep-background' : rgba(color('brand', 'primary'), 0.75),
        'overlay-dark-background' : rgba(color('greyscale', 'grey-5'), 0.75),
        'overlay-alt-background'  : rgba(color('greyscale', 'grey-5'), 0.5)
 	), $custom);

	//-------------------------------------------------------------
	// Module
	//-------------------------------------------------------------
	
	@include module {

	// Core Styles
	//-------------------------------------------------------------
	
		background-size: cover;	
		background-position: center;
        
        @include overwrite-component('group', $parent: 'heading') {
            color: this('heading-group-color');
        }

	// Modifiers
	//-------------------------------------------------------------

		//---------------------------------------------------------
		// Primary/Secondary
		//---------------------------------------------------------
		
		@include modifiers(('primary', 'secondary')) {
			padding: this('padding');
		}
        
        @include modifier('mini') {
            padding: this('padding-mini');
        }
        
        @include modifier('panel') {
			border-top: 1px solid color('greyscale', 'grey-2');	
			background: this('panel-background');
        }
	
		//---------------------------------------------------------
		// Secondary
		//---------------------------------------------------------
		
		@include modifier('secondary') {
			background-color: this('secondary-background');
			> .container {
				position: relative;
			}
			&, a:not([class*="button-"]) {
				color: this('secondary-color');
			}
			p, li {
				a {
					border-bottom: 1px dotted;
				}
			}
			.owl-dot {
				&.active {
					span {
						background: color('greyscale', 'white');
					}
				} 
			}
            b, strong {
                color: this('secondary-color');
            }
			@include overwrite-component('group', $parent: 'heading') {
                &, p {
				    color: this('secondary-color');
                }
			}
		}
		
		//---------------------------------------------------------
		// Full Screen
		//---------------------------------------------------------
		
		@include modifier('full-screen') {
			height: 100vh;
			@if option($top-bar, 'fixed') {
				height: calc(100vh - #{option($top-bar, 'height')});
			}
			@if option($header, 'sticky') {
				height: calc(100vh - #{option($header, 'height')});
			}
		}
		
		@at-root {
			@include overwrite('top-bar', $is: 'fixed') {
				@include overwrite($special: 'general-sibling', $is: 'full-screen') {
					height: calc(100vh - #{option($top-bar, 'height')});
				}
			}
		}
		
		@at-root {
			@include overwrite('app-header', $is: 'sticky') {
				@include overwrite($special: 'general-sibling', $is: 'full-screen') {
					height: calc(100vh - #{option($header, height)});
				}
			}
		}
	
		//---------------------------------------------------------
		// Overlay
		//---------------------------------------------------------
		
		@include modifier('overlay') {
			@include bg-overlay(
                this('overlay-background')
            );
			@include modifier('deep') {
				@include bg-overlay(
                    this('overlay-deep-background')
                );
			}
			@include modifier('dark') {
				@include bg-overlay(
                    this('overlay-dark-background')
                );			
			}
			@include modifier('alt') {
				@include bg-overlay(
                    this('overlay-alt-background')
                );			
			}
			&, a:not([class*="button-"]) {
				color: this('overlay-color');
			}
			.wrap-section {
				position: relative;
			}
		}
	
		//---------------------------------------------------------
		// Dot Map
		//---------------------------------------------------------
		
		@include modifier('dot-map') {
			position: relative;
			padding-bottom: 12em;
			&:before {
				content: "";
				background-image: url("#{$asset-path}/images/dot-map.png");
				background-position: center top;
				background-repeat: no-repeat;
				opacity: 0.1;
				position: absolute;
				bottom: 0;
				height: 9em;
				width: grid-option('base-width');
				max-width: grid-option('max-width');
				@extend %horizontal-center;
			}
		}
	
		//---------------------------------------------------------
		// Banner
		//---------------------------------------------------------
		
		@include modifier('banner') {
			padding: this('banner-padding');
		}
		
		//---------------------------------------------------------
		// Flush
		//---------------------------------------------------------
		
		@include modifier('flush') {
			padding-top: 0;
		}
		
		//---------------------------------------------------------
		// Sink
		//---------------------------------------------------------
		
		@include modifier('sink') {
			padding-bottom: 0;
		}
		
		//---------------------------------------------------------
		// Block
		//---------------------------------------------------------
		
		@include modifier('block') {
            overflow: hidden;
			& + & {
				border-top: 1px solid color('greyscale', 'grey-2');
                position: relative;
			}
		}
		
	// Components
	//-------------------------------------------------------------
	
		@include component('block') {
			position: relative;
			transition: base('transition');
			padding: 5em this('block-padding');
			background-size: cover;
            @media (min-width: breakpoint('break-2')) {
			 padding: this('block-padding');
            }
			@include modifier('opaque') {
				background: rgba(white, 0.95);
			}
		}
		
		@include component('graphic') {
			position: relative;
			> img {
				position: absolute;
				transform: translateY(-10%);
				@extend %horizontal-center;
			}
		}
	
	} // module
	
} // @mixin sections