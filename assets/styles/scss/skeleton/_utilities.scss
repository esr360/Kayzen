//=================================================================
// Utilities
//=================================================================

//-----------------------------------------------------------------
// Modular CSS Mixins 
//-----------------------------------------------------------------

// Component
// Define the main component
@mixin component($component: $component, $type: class) {
	$component: $component !global;
	@if $type == class {
		[class*="#{$component}-"] {
			@content;
		}	
	} @else if $type == data {
		[data-#{$component}] {
			@content;
		}
	} 
}

// Nested Component
// Nest components for appropriate cascading
@mixin nested-component($component: $component, $root: false, $type: flex) { 
	@if $root {
		@at-root {
			@if $type == static {
				.#{$component} {
					@content;
				}
			} @else if $type == chain {
				[class*="#{$component}-"] {
					@content;
				}
			} @else if $type == flex {
				.#{$component},
				[class*="#{$component}-"] {
					@content;
				}
			}
		}
	} @else {
		@if $type == static {
			.#{$component} {
				@content;
			}
		} @else if $type == chain {
			[class*="#{$component}-"] {
				@content;
			}
		} @else if $type == flex {
			.#{$component},
			[class*="#{$component}-"] {
				@content;
			}
		}
	}
}

// Core/Default Styles
// Define styles inside a component but generate them outside
// the component
@mixin core($type: class) {	
	$parent: nth(&, 1) !global;	
	@if $type == class {
		@at-root &, .#{$component} {
			@content;
		}
	} @else if $type == data {
		@at-root & {
			@content;
		}
	}
}

// Modifiers 
// Add a modifier to an existing component
@mixin modifier($modifier, $root: false) {
	@if $root {
		
	} @else {
		&[class*="-#{$modifier}"] {
			@content;
		}
	}
}

// Extend Modifiers
// Extend one or more modifiers of a component
@mixin extend($modifiers...) {
	@each $modifier in $modifiers {
		@extend [class*="#{$component}-"][class*="-#{$modifier}"];
	}
}

// Change Context
// Allow cascading whilst retaining modular nesting
@mixin context($old-context, $new-context) {
    @at-root #{selector-replace(&, $old-context, $new-context)} {
        @content;
    }
}

//-----------------------------------------------------------------
// Responsive Media Queries
//-----------------------------------------------------------------

//-----------------------------------------------------------------
// Vertical Rhythm
//-----------------------------------------------------------------

// Remove top spacing 

%top-rhythm {
	&:first-child {
		margin-top: 0;
	}   
}

// Remove bottom spacing 

%bottom-rhythm {
	&:last-child {
		margin-bottom: 0;
	}  
}

@mixin vertical-rhythm($position: null) {  
	@if $position == top { 
		@extend %top-rhythm;
	} @else if $position == bottom {
		@extend %bottom-rhythm;
	} @else {
		@extend %top-rhythm;
		@extend %bottom-rhythm;
	}
}

//-----------------------------------------------------------------
// Vertical Centering
//-----------------------------------------------------------------

@mixin vertical-center($position) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

//-----------------------------------------------------------------
// Horizontal Centering
//-----------------------------------------------------------------

%horizontal-center {
	left: 0;
	right: 0;
	margin: auto;  
	text-align: center;
}

@mixin horizontal-center {
	@extend %horizontal-center;
}

//-----------------------------------------------------------------
// Font Sizes
//-----------------------------------------------------------------

@mixin font-sizes {
	@each $size, $value in $font-sizes {
		@include modifier($size) {
			font-size: $value;
		}
	}
}

//-----------------------------------------------------------------
// Fill-Parent Element 
//-----------------------------------------------------------------

%fill-parent {
	position: absolute;
	height: 100%;
	width: 100%;
	top: 0;
	left: 0;
}

@mixin fill-parent {
	@extend %fill-parent;
}

//-----------------------------------------------------------------
// Overlay
//-----------------------------------------------------------------

@mixin bg-overlay($background) {
	position: relative;
	&:before {
		content: "";
		z-index: 0;
		background: $background;
		@include fill-parent;
	}
}

//-----------------------------------------------------------------
// Keyframes
//-----------------------------------------------------------------

@keyframes spin { 
	0% {
		transform: rotate(0deg); 
	}
	100% { 
		transform: rotate(360deg); 
	} 
}

//-----------------------------------------------------------------
// Reset List Styles
//-----------------------------------------------------------------

%list-reset {
	margin: 0;
	padding: 0;
	list-style: none;
}

//-----------------------------------------------------------------
// CSS Triangle
//-----------------------------------------------------------------

@mixin triangle(
	$position: top, 
	$color: rgba($black, 0.75),
	$size: 0.5rem
) {
	&:after {
		content:'';
		position: absolute;
		width: 0;
		height: 0;
		margin-left: -$size;
		@if $position == top {
			top: 100%;
			left: 50%;
			border-left: solid $size transparent;
			border-right: solid $size transparent;
			border-top: solid $size $color;
		} @else if $position == bottom {
			bottom: 100%;
			left: 50%;
			border-left: solid $size transparent;
			border-right: solid $size transparent;
			border-bottom: solid $size $color;
		} @else if $position == left {
			top: 50%;
			right: -$size;
			transform: translateY(-50%);
			border-top: solid $size transparent;
			border-bottom: solid $size transparent;
			border-left: solid $size $color;
		} @else if $position == right {
			top: 50%;
			right: 100%;
			transform: translateY(-50%);
			border-top: solid $size transparent;
			border-bottom: solid $size transparent;
			border-right: solid $size $color;
		}
	}
}