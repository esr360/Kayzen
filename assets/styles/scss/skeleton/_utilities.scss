//=================================================================
// Utilities
//=================================================================

//-----------------------------------------------------------------
// Modular CSS Mixins 
//-----------------------------------------------------------------

// Component
// Define the main component
@mixin component($component: $component, $core: false, $type: class) {
	$component: $component !global;
	@if $type == class {
		@if $core {
			.#{$component},
			[class*="#{$component}-"] {
				@content;
			}	
		}
		@else {
			[class*="#{$component}-"] {
				@content;
			}
		}
	} @else if $type == data {
		[data-#{$component}] {
			@content;
		}
	} 
}

// Nested Component
// Nest components for appropriate cascading
@mixin nested-component($component: $component, $root: false, $type: chain) {
	@if $type == static {
		@if $root {
			@at-root .#{$component} {
				@content;
			}
		} @else { 
			.#{$component} {
				@content;
			}
		}
	} @else if $type == chain {
		@if $root {
			@at-root [class*="#{$component}-"] {
				@content;
			}
		} @else { 
			[class*="#{$component}-"] {
				@content;
			}
		}
	} @else if $type == flex {
		@if $root {
			@at-root .#{$component},
			[class*="#{$component}-"] {
				@content;
			}
		} @else { 
			.#{$component},
			[class*="#{$component}-"] {
				@content;
			}
		}
	}
}

// Core/Default Styles
// Define styles inside a component but generate them outside
// the component
@mixin core($type: class) {	
	$parent: nth(&, 1) !global;	
	@if $type == class {
		@at-root &, .#{$component} {
			@content;
		}
	} @else if $type == data {
		@at-root & {
			@content;
		}
	}
}

// Modifiers 
// Add a modifier to an existing component
@mixin modifier($modifier, $root: false) {
	@if $root {
		
	} @else {
		&[class*="-#{$modifier}"] {
			@content;
		}
	}
}

// Extend Modifiers
// Extend one or more modifiers of a component
@mixin extend($modifiers...) {
	@each $modifier in $modifiers {
		@extend [class*="#{$component}-"][class*="-#{$modifier}"];
	}
}

//-----------------------------------------------------------------
// Advanced Functions
//-----------------------------------------------------------------

// Reverse Map Function
// http://git.io/vLfuz
//-----------------------------------------------------------------

@function reverse-map ($map) {	
    $keys: map-keys($map);
    $map-reversed: ();    
    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }
    $result: $map-reversed; 
    @return $result;
}

// Map-Set Function
// http://git.io/vmBKD
//-----------------------------------------------------------------

@function get-keys($keys, $counter) {
	$return: ();
	@for $i from 1 to $counter {
		$return: append($return, nth($keys, $i));
	}
	@return $return;
}

@function map-set($map, $key, $value) {
	@return map-merge($map, ($key: $value));
}

@function map-set-deep($map, $keys, $value) {
	
	$private-sassy-maps-suppress-warnings: true !global;
	$length: length($keys);
	$get-keys: ();
	$map-level: ();

	@if $length > 1 {
		$get-keys: get-keys($keys, $length);
		$map-level: map-get-deep($map, $get-keys);
	}
  	$merge: (nth($keys, $length): $value);
	@if $map-level {
		$merge: map-merge($map-level, $merge);
	}
	@for $i from ($length * -1 + 1) through -1 {
		$j: abs($i);
		$key: nth($keys, $j);
		// @debug $get-keys;
		@if $j > 1 {
			$get-keys: get-keys($keys, $j);
			$map-level: map-get-deep($map, $get-keys);
			@if $map-level {
				$merge: map-merge($map-level, ($key: $merge));
			}
			@else {
				$merge: ($key: $merge);
			}
		}
		@else {
			$merge: ($key: $merge);
		}
	}
	$map: map-merge($map, $merge);
	$private-sassy-maps-suppress-warnings: false !global;
	@return $map;
  
}

// Map Deep Merge
// http://git.io/vmBVH
//-----------------------------------------------------------------

@function map-merge-deep($map-old, $map-new, $overwrite: true) {
	// Iterate through each value of the new map
	@each $key, $new-value in $map-new {
		// Check if that value already exists on the old map
		@if map-has-key($map-old, $key) {
			// There is an existing key
			$old-value: map-get($map-old, $key);
			@if type-of($new-value) == map and type-of($old-value) == map {
				// If both are maps, recurse regardless of $overwrite
				$merged-value: map-merge-deep($old-value, $new-value);
				$map-old: map-set($map-old, $key, $merged-value);
			} @else {
				// Otherwise check $overwrite
				@if $overwrite{
					$map-old: map-set($map-old, $key, $new-value);
				}
			}
		} @else {
			// There is no existing key so add
			$map-old: map-set($map-old, $key, $new-value);
		}
	}
	@return $map-old;
}

//-----------------------------------------------------------------
// Vertical Centering
//-----------------------------------------------------------------

@mixin vertical-center($position) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

//-----------------------------------------------------------------
// Font Sizes
//-----------------------------------------------------------------

@mixin font-sizes {
	@each $size, $value in typography-config(sizes) {
		@include modifier($size) {
			font-size: $value;
		}
	}
}

//-----------------------------------------------------------------
// Overlay
//-----------------------------------------------------------------

@mixin bg-overlay($background) {
	position: relative;
	&:before {
		content: "";
		z-index: 0;
		background: $background;
		@extend %fill-parent;
	}
}

//-----------------------------------------------------------------
// Keyframes
//-----------------------------------------------------------------

@keyframes spin { 
	0% {
		transform: rotate(0deg); 
	}
	100% { 
		transform: rotate(360deg); 
	} 
}

//-----------------------------------------------------------------
// CSS Triangle
//-----------------------------------------------------------------

@mixin triangle-core {
	&:after {
		content:'';
		position: absolute;
		width: 0;
		height: 0;
	}
}

@mixin triangle($config: ()) {
	
	$tooltip-position: null;
	
	$config: map-merge((
		core     : true, 
		position : $tooltip-position, 
		color    : tooltip(arrow-color),
		size     : tooltip(arrow-size)
	), $config);
	
	&:after {
		margin-left: -#{map-get($config, size)};
		@if map-get($config, core) {
			@include triangle-core;
		}
		@if map-get($config, position) == top {
			top: 100%;
			left: 50%;
			border-left: solid map-get($config, size) transparent;
			border-right: solid map-get($config, size) transparent;
			border-top: solid map-get($config, size) map-get($config, color);
		} @else if map-get($config, position) == bottom {
			bottom: 100%;
			left: 50%;
			border-left: solid map-get($config, size) transparent;
			border-right: solid map-get($config, size) transparent;
			border-bottom: solid map-get($config, size) map-get($config, color);
		} @else if map-get($config, position) == left {
			top: 50%;
			right: -#{map-get($config, size)};
			transform: translateY(-50%);
			border-top: solid map-get($config, size) transparent;
			border-bottom: solid map-get($config, size) transparent;
			border-left: solid map-get($config, size) map-get($config, color);
		} @else if map-get($config, position) == right {
			top: 50%;
			right: 100%;
			transform: translateY(-50%);
			border-top: solid map-get($config, size) transparent;
			border-bottom: solid map-get($config, size) transparent;
			border-right: solid map-get($config, size) map-get($config, color);
		}
	}
}