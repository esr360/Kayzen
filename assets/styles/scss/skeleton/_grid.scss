//=================================================================
// Grid
//=================================================================

/*-----------------------------------------------------------------

Kayzen GS
Made by @esr360
http://github.com/esr360/Kayzen-GS/
	
-----------------------------------------------------------------*/

//-----------------------------------------------------------------
// Config
//-----------------------------------------------------------------

$grid: (
	options: (
		base-width      : 1200px,
		max-width       : 90%,
		small-width     : 940px,
		full-width      : 100%,
		columns         : 12,
		gutter          : 3%,
		col-collapse    : 940px,
		row-namespace   : "row",
		col-namespace   : "span"	
	),
	settings: (
		old-ie          : true,
		responsive      : true,
		mobile-first    : false,
		column-stacking : true,
		width-override  : true,
		flow-columns    : true,
		magic-columns   : true,
		block-columns   : true
	),
	breakpoints: (
		break-0         : 0px,
		break-1         : 460px,
		break-2         : 720px,
		break-3         : 940px,
		break-4         : 1200px,
		break-5         : 1400px
	),
	fractions: (
		full            : (1, 1),
		half            : (1, 2),
		third           : (1, 3),
		quarter         : (1, 4),
		sixth           : (1, 6)
	)
);

//-----------------------------------------------------------------
// Mixin
//-----------------------------------------------------------------

@mixin grid($config: ()) {

	$config: map-merge-deep($grid, $config);	
	$grid: $config !global;

	// Set min/max width for breakpoints
	$scale: null;
	@if grid-option(mobile-first) {	
		$scale: min; 
	} @else {	
		$scale: max; 
	}

	// Reset "mobile-first" to false if "responsive" is disabled
	@if grid-setting(responsive) == false {
		$grid: map-merge-deep((
			settings: (
				mobile-first: false
			)
		), $grid);
	}
	
	//-------------------------------------------------------------
	// Single Column
	//-------------------------------------------------------------
	
	%column {
		display: inline-block;
		vertical-align: top;
		// IE < 8: fake inline-block
		@if grid-setting(old-ie) {
			*display: inline;
			zoom: 1; 
		}
	}
	
	@include component(#{grid-option(col-namespace)}) {
		@extend %column;
		@if grid-setting(mobile-first) {
			width: 100%;
		} @else {		
			@include gutter;
		}
		// Default Column Width
		@if grid-setting(mobile-first) == false {
			@for $i from 1 through grid-option(columns) {
				@include modifier(#{$i}) {	
					@include column-width($i, grid-option(columns));
				}
			}	
		}
	} // column

	//-------------------------------------------------------------
	// Column Row
	//-------------------------------------------------------------
	
	%row {
		// Firefox/IE collapse white-space
		letter-spacing: -1em;
		// Webkit collapse white-space
		display: table !important;
		width: 100%;
		// Opera collapse white-space
		@at-root {
			.opera-only :-o-prefocus, & {
				word-spacing: -0.43em;
			}
		}
		// IE < 8 collapse white-space
		@if grid-setting(old-ie) {
			*letter-spacing: normal;
			*word-spacing: -0.43em;
		}	
		// Reset spacing
		@at-root {
			* {        
				letter-spacing: normal;
				word-spacing: normal;
				text-rendering: auto;
			}		
		}
		// Pseudo element to help with vertical aligning
		&:after {
			content: "";
			display: inline-block;
			vertical-align: middle;
			height: 100%;
		}
	}
	
	%flow-row {
		margin-left: -grid-option(gutter);
		width: 100% + grid-option(gutter);
	}

	@include component(#{grid-option(row-namespace)}) {
		
		@extend %row;
	
		// Default Stacking
		@if grid-setting(responsive) {
			@media (#{$scale}-width: grid-option(col-collapse)) {
				&:not([class*="break"]):not([class*="flow"]) {
					@include stack-columns;
				}
			}
		}
	
		// Custom Stacking
		@if grid-setting(responsive) {
			@if grid-setting(column-stacking) {
				@each $bp, $width in map-get($grid, breakpoints) {
					@media (#{$scale}-width: $width) {
						&.#{$bp} {
							@include stack-columns;
							@if grid-setting(mobile-first) {
								&.block-row {
									> [class*="#{grid-option(col-namespace)}"] {
										display: table-cell;
									}
								}
							}
						}
					}
				} 	
			} 
		}

		//Flow Columns
		@if grid-setting(flow-columns) {
			@include modifier(flow) {
				@extend %flow-row;
				@for $i from 1 through grid-option(columns) {
					.#{grid-option(col-namespace)}-#{$i} {		
						@if grid-setting(mobile-first) {
							width: (100% - grid-option(gutter));
							@media (min-width: grid-option(col-collapse)) {
								@include flow-column-width($i, grid-option(columns));
							}
						} @else {
							@include flow-column-width($i, grid-option(columns));
						}
					}
				}
				> [class*="#{grid-option(col-namespace)}"] {
					margin-left: grid-option(gutter);
					&:not([class*="break"]) {
						@if grid-setting(responsive) {
							@if grid-setting(mobile-first) == false {
								@media (max-width: grid-option(col-collapse)) {
									width: (100% - grid-option(gutter));
								}
							}
						}
					}
				}
			}
		}

		// Magic Columns
		@if grid-setting(magic-columns) {
			@include modifier(magic) {
				> [class*="#{grid-option(col-namespace)}"]:not([class*="break"]) {	
					@include magic-column((
						semantic: false
					));
				}
			}	
		}

		// Block Columns
		@if grid-setting(block-columns) {
			@include modifier(block) {
				> [class*="#{grid-option(col-namespace)}"]:not([class*="break"]) {			
					@if grid-setting(mobile-first) {
						@media (min-width: grid-option(col-collapse)) {
							display: table-cell;
						}
					} @else {
						display: table-cell;
					}
				}
				&:after {
					display: none;
				}
			}
		}
	
	} // row

	//-------------------------------------------------------------
	// Column Width Overrides
	// For Flow Columns only
	//-------------------------------------------------------------

	// Reverse $breakpoints map
	// This is to allow the generated CSS to override when scaling
	@if grid-setting(responsive) {
		@if grid-setting(width-override) {
			$reverse-breakpoints: null;
			@if grid-setting(mobile-first) {
				$reverse-breakpoints: map-get($grid, breakpoints);
			} @else {
				$reverse-breakpoints: reverse-map(map-get($grid, breakpoints));	
			}	
			@include component(#{grid-option(row-namespace)}, true) {
				@each $bp, $width in $reverse-breakpoints {
					@media (#{$scale}-width: $width) {
						@each $name, $fraction in map-get($grid, fractions) {				
							.#{$bp}-#{$name} {
								@include flow-column-width(nth($fraction, 1), nth($fraction, 2));
							}
						}
					}
				}
			}
		}
	}
	
} // @mixin grid

//-----------------------------------------------------------------
// Utilities
//-----------------------------------------------------------------

// Gutter
@mixin gutter {
	margin-left: grid-option(gutter);
	&:first-child {
		margin-left: 0;
	}
}

// Column width mixin
@mixin column-width($span, $columns) {
	width: ( (100/$columns) * $span) - ( ( ((100 / ((100/$columns) * $span)) - 1) * grid-option(gutter) ) / ( $columns / $span ) );
}

// Flow Column width mixin
@mixin flow-column-width($span, $columns) {
	width: ((100/$columns) * $span) - grid-option(gutter);
}

// Magic Column width mixin
@mixin magic-column-width($columns: $columns) {
	width: (100/$columns) - ( ( ( (100 / (100/$columns) ) - 1) * grid-option(gutter) ) / $columns );
}

// Magic Column

@mixin magic-column($config: ()) {
	
	$config: map-merge((
		namespace : grid-option(col-namespace), 
		stack     : grid-option(col-collapse), 
		semantic  : true
	), $config);
	
	&:first-child {
		@for $i from 1 through grid-option(columns) {
			&:nth-last-child(#{$i}) {
				&, ~ [class*="#{map-get($config, namespace)}"] {
					@if grid-setting(mobile-first) {	
						@if map-get($config, semantic) {
							margin-left: 0;	
							width: 100%;
						}	
						@media (min-width: map-get($config, stack)) {
							@include magic-column-width($i);
							@if map-get($config, semantic) {
								@include gutter;
							}
						}
					} @else {
						@include magic-column-width($i);
						@if map-get($config, semantic) {
							@include gutter;
						}
						@media (max-width: map-get($config, stack)) {
							width: 100%;
							@if map-get($config, semantic) {
								margin-left: 0;
							}
						}
					}
				}
			}
		}
	}
		
} // magic-column

// Column Stacking
@mixin stack-columns {
	@if grid-setting(mobile-first) {
		@for $i from 1 through grid-option(columns) {
			.#{grid-option(col-namespace)}-#{$i} {	
				@include column-width($i, grid-option(columns));
			}
		}
		> [class*="#{grid-option(col-namespace)}"]:not([class*="break"]) {
			@include gutter;
		}
	} @else {
		> [class*="#{grid-option(col-namespace)}"]:not([class*="break"]) {
			width: 100%;
			margin-left: 0;
			display: block;
		}
	}		
}

// Functions
//-----------------------------------------------------------------

@function grid-option($option) {
    @return map-get(map-get($grid, options), $option);
}

@function grid-setting($setting) {
    @return map-get(map-get($grid, settings), $setting);
}

@function breakpoint($breakpoint) {
    @return map-get(map-get($grid, breakpoints), $breakpoint);
}

@function fraction($fraction) {
    @return map-get(map-get($grid, fractions), $fraction);
}

//=================================================================
// Semantic Grid System Framework
//=================================================================

// Custom Column
//-----------------------------------------------------------------

@function column($key) {
	@return map-get($config, $key);
}

@mixin column($config: ()) {
	
	$config: map-merge((
		width        : full, 
		type         : null, 
		namespace    : grid-option(col-namespace), 
		stack        : grid-option(col-collapse), 
		mobile-first : grid-setting(mobile-first),
		respond-to   : null
	), $config) !global;
	
	@extend %column;
	$span: null;
	$columns: null;
	
	@if type-of(column(width)) == string {
		$span: nth(fraction(column(width)), 1);
		$columns: nth(fraction(column(width)), 2);
	} @else if type-of(column(width)) == number {
		$span: column(width);
		$columns: 100;
	} @else if type-of(column(width)) == list {
		$span: nth(column(width), 1);
		$columns: nth(column(width), 2);			
	}
	
	@if column(type) == magic {
		@include magic-column($namespace, $stack);
	} @else if column(type) == flow {	
		@include flow-column-width($span, $columns);
		margin-left: grid-option(gutter);
	} @else {
		@if column(mobile-first) {
			width: 100%;
			@media (min-width: $stack) {
				@include column-width($span, $columns);
				@include gutter;
				@if $type == block {
					display: table-cell;		
				} 
			}
		} @else {		
			@include gutter;
			@include column-width($span, $columns);
			@if column(type) == block {
				display: table-cell;		
			} 
			@media (max-width: column(stack)) {
				display: block;
				margin-left: 0;
				width: 100%;
			}
		}
	}
	
	@if column(respond-to) {	
		@each $width, $breakpoint in $respond-to {
			$columns: null;	$span: null; $respond-scale: null;
			@if $mobile-first { 
				$respond-scale: min; 
			} 
			@else {
				$respond-scale: max; 
			}
			@media (#{$respond-scale}-width: breakpoint($breakpoint)) {
				@if type-of($width) == string {
					$span: nth(fraction($width), 1);
					$columns: nth(fraction($width), 2);
				} @else if type-of($width) == number {
					$span: $width;
					$columns: 100;
				} @else if type-of($width) == list {
					$span: nth($width, 1);
					$columns: nth($width, 2);			
				}
				@if $flow-columns {
					@include flow-column-width($span, $columns);
				} @else {
					@include column-width($span, $columns);
					@if $mobile-first == false {
						margin-left: 0;
					}
				}
			}	
		}
	}
	
} // column

// Custom Row
//-----------------------------------------------------------------

@mixin row($type: null) {
	@extend %row;
	@if $type == flow {		
		@extend %flow-row;
	} @else if $type == block {		
		&:after {
			display: none;
		}
	}
}